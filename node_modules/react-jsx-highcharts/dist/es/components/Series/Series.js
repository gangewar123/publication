import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import { isEqual } from 'lodash-es';
import { attempt } from 'lodash-es';
import isImmutable from 'is-immutable';
import immutableEqual from 'immutable-is';
import { Provider } from '../SeriesContext';
import { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';
import { logSeriesErrorMessage } from '../../utils/warnings';

var Series =
/*#__PURE__*/
function (_Component) {
  _inherits(Series, _Component);

  function Series(props) {
    var _this;

    _classCallCheck(this, Series);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Series).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "getSeriesConfig", function () {
      var _this$props = _this.props,
          id = _this$props.id,
          data = _this$props.data,
          requiresAxis = _this$props.requiresAxis,
          getAxis = _this$props.getAxis,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["id", "data", "requiresAxis", "getAxis", "children"]);

      var seriesId = typeof id === 'function' ? id() : id;
      var seriesData = isImmutable(data) ? data.toJS() : data;
      var nonEventProps = getNonEventHandlerProps(rest);
      var events = getEventsConfig(rest);

      var config = _objectSpread({
        id: seriesId,
        data: seriesData,
        events: events
      }, nonEventProps);

      if (requiresAxis) {
        var axis = getAxis();
        config[axis.type] = axis.id;
      }

      return config;
    });

    _defineProperty(_assertThisInitialized(_this), "createSeries", function () {
      var chart = _this.props.getChart(); // Create Highcharts Series


      var opts = _this.getSeriesConfig();

      _this.series = chart.addSeries(opts, false);
    });

    if (process.env.NODE_ENV === 'development') {
      var type = props.type,
          getHighcharts = props.getHighcharts;
      var seriesTypes = Object.keys(getHighcharts().seriesTypes);
      if (seriesTypes.indexOf(type) === -1) logSeriesErrorMessage(type);
    }

    return _this;
  }

  _createClass(Series, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          visible = _this$props2.visible,
          data = _this$props2.data,
          rest = _objectWithoutProperties(_this$props2, ["visible", "data"]);

      var needsRedraw = false; // Using setData is more performant than update

      if (isImmutable(data) && immutableEqual(data, prevProps.data) === false) {
        this.series.setData(data.toJS(), false);
        needsRedraw = true;
      } else if (isEqual(data, prevProps.data) === false) {
        this.series.setData(data, false);
        needsRedraw = true;
      }

      if (visible !== prevProps.visible) {
        this.series.setVisible(visible, false);
        needsRedraw = true;
      }

      var modifiedProps = getModifiedProps(prevProps, rest);

      if (modifiedProps !== false) {
        this.series.update(modifiedProps, false);
        needsRedraw = true;
      }

      if (needsRedraw) {
        this.props.needsRedraw();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.needsRedraw();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.series && this.series.remove) {
        // Series may have already been removed, i.e. when Axis unmounted
        attempt(this.series.remove.bind(this.series), false);
        this.props.needsRedraw();
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.series) this.createSeries();
      return React.createElement(Provider, {
        value: this.series
      }, this.props.children);
    }
  }]);

  return Series;
}(Component);

_defineProperty(Series, "defaultProps", {
  type: 'line',
  id: uuid,
  children: null,
  data: [],
  requiresAxis: true,
  visible: true
});

export default Series;