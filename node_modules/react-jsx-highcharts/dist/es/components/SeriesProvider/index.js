import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import DelayRender from '../DelayRender';
import provideAxis from '../AxisProvider';
import { Consumer } from '../SeriesContext';
import getDisplayName from '../../utils/getDisplayName';
import clean from '../../utils/removeProvidedProps'; // This is a HOC function.
// It takes a component...

export default function provideSeries(Component) {
  // ...and returns another component...
  var SeriesWrappedComponent = function SeriesWrappedComponent(props) {
    // ... and renders the wrapped component with the context series
    // Notice that we pass through any additional props as well
    return React.createElement(DelayRender, null, React.createElement(Consumer, null, function (series) {
      if (!series && props.seriesId) {
        var chart = props.getChart();
        series = chart.get(props.seriesId);
      }

      if (!series) return null;

      var getSeries = function getSeries() {
        return {
          object: series,
          id: series.userOptions && series.userOptions.id,
          type: series.type,
          update: clean(series.update.bind(series)),
          remove: series.remove.bind(series),
          setData: series.setData.bind(series),
          setVisible: series.setVisible.bind(series)
        };
      };

      return React.createElement(Component, _extends({}, props, {
        getSeries: getSeries
      }));
    }));
  };

  SeriesWrappedComponent.displayName = "Series.Provider(".concat(getDisplayName(Component), ")");
  return provideAxis(SeriesWrappedComponent);
}