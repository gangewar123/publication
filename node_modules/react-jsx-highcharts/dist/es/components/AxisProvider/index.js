import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { defaultTo } from 'lodash-es';
import DelayRender from '../DelayRender';
import provideChart from '../ChartProvider';
import { Consumer } from '../AxisContext';
import getDisplayName from '../../utils/getDisplayName';
import clean from '../../utils/removeProvidedProps'; // This is a HOC function.
// It takes a component...

export default function provideAxis(Component) {
  // ...and returns another component...
  var AxisWrappedComponent = function AxisWrappedComponent(props) {
    // ... and renders the wrapped component with the context axis
    // Notice that we pass through any additional props as well
    var requiresAxis = defaultTo(props.requiresAxis, true);
    return React.createElement(DelayRender, null, React.createElement(Consumer, null, function (axis) {
      if (!axis && props.axisId) {
        var chart = props.getChart();
        axis = chart.get(props.axisId);
      } // Some series (such as Pie and Funnel don't require an axis)


      if (!axis && requiresAxis) return null;

      var getAxis = function getAxis() {
        return {
          object: axis,
          id: axis.userOptions && axis.userOptions.id,
          type: axis.coll,
          update: clean(axis.update.bind(axis)),
          remove: axis.remove.bind(axis),
          addPlotBand: clean(axis.addPlotBand.bind(axis)),
          removePlotBand: axis.removePlotBand.bind(axis),
          addPlotLine: clean(axis.addPlotLine.bind(axis)),
          removePlotLine: axis.removePlotLine.bind(axis),
          getExtremes: axis.getExtremes.bind(axis),
          setExtremes: axis.setExtremes.bind(axis),
          setTitle: clean(axis.setTitle.bind(axis))
        };
      };

      return React.createElement(Component, _extends({}, props, {
        getAxis: getAxis
      }));
    }));
  };

  AxisWrappedComponent.displayName = "Axis.Provider(".concat(getDisplayName(Component), ")");
  return provideChart(AxisWrappedComponent);
}