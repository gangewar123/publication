import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Component } from 'react';
import PropTypes from 'prop-types';
import { addEventHandlersManually, getNonEventHandlerProps } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';

var Chart =
/*#__PURE__*/
function (_Component) {
  _inherits(Chart, _Component);

  function Chart() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Chart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Chart)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "updateChart", function (config) {
      var chart = _this.props.getChart();

      chart.update({
        chart: config
      }, false);

      _this.props.needsRedraw();
    });

    return _this;
  }

  _createClass(Chart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          width = _this$props.width,
          height = _this$props.height,
          getHighcharts = _this$props.getHighcharts,
          getChart = _this$props.getChart,
          needsRedraw = _this$props.needsRedraw,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["width", "height", "getHighcharts", "getChart", "needsRedraw", "children"]);

      var notEventProps = getNonEventHandlerProps(rest);
      var chart = getChart();
      chart.setSize(width, height);
      this.updateChart(notEventProps);
      addEventHandlersManually(getHighcharts(), chart.object, rest);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          width = _this$props2.width,
          height = _this$props2.height,
          getChart = _this$props2.getChart,
          rest = _objectWithoutProperties(_this$props2, ["width", "height", "getChart"]);

      if (width !== prevProps.width || height !== prevProps.height) {
        getChart().setSize(width, height);
      }

      var modifiedProps = getModifiedProps(prevProps, rest);

      if (modifiedProps !== false) {
        this.updateChart(modifiedProps);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Chart;
}(Component);

_defineProperty(Chart, "defaultProps", {
  type: 'line',
  onAddSeries: function onAddSeries() {},
  onAfterPrint: function onAfterPrint() {},
  onBeforePrint: function onBeforePrint() {},
  onClick: function onClick() {},
  onLoad: function onLoad() {},
  onRedraw: function onRedraw() {},
  onRender: function onRender() {},
  onSelection: function onSelection() {}
});

export default Chart;