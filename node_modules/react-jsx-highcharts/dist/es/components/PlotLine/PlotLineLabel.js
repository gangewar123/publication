import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Component } from 'react';
import PropTypes from 'prop-types';
import { pickBy } from 'lodash-es';
import { attempt } from 'lodash-es';
import { find } from 'lodash-es';
import getModifiedProps from '../../utils/getModifiedProps';

var PlotLineLabel =
/*#__PURE__*/
function (_Component) {
  _inherits(PlotLineLabel, _Component);

  function PlotLineLabel() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, PlotLineLabel);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlotLineLabel)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "getLabelProps", function (props) {
      return pickBy(props, function (value, propName) {
        return PlotLineLabel.labelProps.indexOf(propName) > -1;
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updatePlotLineLabel", function (config) {
      var _this$props = _this.props,
          id = _this$props.id,
          getAxis = _this$props.getAxis;
      var axis = getAxis();
      window.requestAnimationFrame(function () {
        var plotLine = axis.object && find(axis.object.plotLinesAndBands, function (line) {
          return line.id === id;
        });

        if (plotLine) {
          plotLine.options.label = _this.getLabelProps(config);
          plotLine.render();
        }
      });
    });

    return _this;
  }

  _createClass(PlotLineLabel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props2 = this.props,
          text = _this$props2.children,
          rest = _objectWithoutProperties(_this$props2, ["children"]);

      this.updatePlotLineLabel(_objectSpread({
        text: text
      }, rest));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (getModifiedProps(prevProps, this.props, true) === false) return;

      var _this$props3 = this.props,
          text = _this$props3.children,
          rest = _objectWithoutProperties(_this$props3, ["children"]);

      this.updatePlotLineLabel(_objectSpread({
        text: text
      }, rest));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this$props4 = this.props,
          children = _this$props4.children,
          rest = _objectWithoutProperties(_this$props4, ["children"]);

      attempt(this.updatePlotLineLabel, _objectSpread({
        text: null
      }, rest));
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return PlotLineLabel;
}(Component);

_defineProperty(PlotLineLabel, "labelProps", ['text', 'align', 'rotation', 'style', 'textAlign', 'useHTML', 'verticalAlign', 'x', 'y']);

export default PlotLineLabel;