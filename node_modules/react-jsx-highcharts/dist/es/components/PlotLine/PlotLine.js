import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component, Children, cloneElement, isValidElement } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import { attempt } from 'lodash-es';
import Hidden from '../Hidden';
import getModifiedProps from '../../utils/getModifiedProps';

var PlotLine =
/*#__PURE__*/
function (_Component) {
  _inherits(PlotLine, _Component);

  function PlotLine(props) {
    var _this;

    _classCallCheck(this, PlotLine);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlotLine).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "getPlotLineConfig", function () {
      var _this$props = _this.props,
          id = _this$props.id,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["id", "children"]);

      if (!_this.id) {
        _this.id = typeof id === 'function' ? id() : id;
      }

      return _objectSpread({
        id: _this.id
      }, rest);
    });

    _this.state = {
      rendered: false
    };
    return _this;
  }

  _createClass(PlotLine, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var axis = this.props.getAxis(); // Create Highcharts Plot Line on Axis

      var opts = this.getPlotLineConfig();
      axis.addPlotLine(opts);
      this.setState({
        rendered: true
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (getModifiedProps(prevProps, this.props) === false) return;
      var axis = this.props.getAxis(); // Plot Lines cannot be updated, we have to remove and re-add

      var opts = this.getPlotLineConfig();
      axis.removePlotLine(opts.id);
      axis.addPlotLine(opts);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var axis = this.props.getAxis();
      attempt(axis.removePlotLine, this.id);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var children = this.props.children;
      if (!children || !this.state.rendered) return null;
      var lineChildren = Children.map(children, function (child) {
        if (isValidElement(child) === false) return child;
        return cloneElement(child, {
          id: _this2.id
        });
      });
      return React.createElement(Hidden, null, lineChildren);
    }
  }]);

  return PlotLine;
}(Component);

_defineProperty(PlotLine, "defaultProps", {
  id: uuid
});

export default PlotLine;