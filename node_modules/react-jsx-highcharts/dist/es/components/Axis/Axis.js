import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import uuid from 'uuid/v4';
import { attempt } from 'lodash-es';
import { Provider } from '../AxisContext';
import { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';
import getModifiedProps from '../../utils/getModifiedProps';
import { validAxisTypes } from '../../utils/propTypeValidators';

var Axis =
/*#__PURE__*/
function (_Component) {
  _inherits(Axis, _Component);

  function Axis() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Axis);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Axis)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "getAxisConfig", function () {
      var _this$props = _this.props,
          id = _this$props.id,
          children = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["id", "children"]);

      var axisId = typeof id === 'function' ? id() : id;
      var nonEventProps = getNonEventHandlerProps(rest);
      var events = getEventsConfig(rest);
      return _objectSpread({
        id: axisId,
        title: {
          text: null
        },
        events: events
      }, nonEventProps);
    });

    _defineProperty(_assertThisInitialized(_this), "createAxis", function () {
      var _this$props2 = _this.props,
          id = _this$props2.id,
          dynamicAxis = _this$props2.dynamicAxis,
          isX = _this$props2.isX,
          getChart = _this$props2.getChart;
      var chart = getChart(); // Create Highcharts Axis

      var opts = _this.getAxisConfig();

      if (dynamicAxis) {
        _this.axis = chart.addAxis(opts, isX, false);
      } else {
        // ZAxis cannot be added dynamically, Maps only have a single axes - update instead
        var axisId = typeof id === 'function' ? id() : id;
        _this.axis = chart.get(axisId);

        _this.axis.update.call(_this.axis, opts, false);
      }
    });

    return _this;
  }

  _createClass(Axis, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props);

      if (modifiedProps !== false) {
        this.axis.update(modifiedProps, false);
        this.props.needsRedraw();
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.props.needsRedraw();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.axis.remove) {
        // Axis may have already been removed, i.e. when Chart unmounted
        attempt(this.axis.remove.bind(this.axis), false);
        this.props.needsRedraw();
      }
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.axis) this.createAxis();
      return React.createElement(Provider, {
        value: this.axis
      }, this.props.children);
    }
  }]);

  return Axis;
}(Component);

_defineProperty(Axis, "defaultProps", {
  id: uuid,
  children: null,
  dynamicAxis: true
});

export default Axis;