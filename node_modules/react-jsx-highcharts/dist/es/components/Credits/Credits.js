import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { Component } from 'react';
import PropTypes from 'prop-types';
import { attempt } from 'lodash-es';
import getModifiedProps from '../../utils/getModifiedProps';

var Credits =
/*#__PURE__*/
function (_Component) {
  _inherits(Credits, _Component);

  function Credits() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Credits);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Credits)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "updateCredits", function (config) {
      var chart = _this.props.getChart(); // Use default Highcharts value if text is not explicitly set


      if ('text' in config && !config.text) delete config.text;
      chart.addCredits(config, true);
    });

    return _this;
  }

  _createClass(Credits, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          text = _this$props.children,
          rest = _objectWithoutProperties(_this$props, ["children"]);

      this.updateCredits(_objectSpread({}, rest, {
        text: text
      }));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var modifiedProps = getModifiedProps(prevProps, this.props, true);

      if (modifiedProps !== false) {
        this.updateCredits(modifiedProps);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      attempt(this.updateCredits, {
        enabled: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Credits;
}(Component);

_defineProperty(Credits, "defaultProps", {
  enabled: true
});

export default Credits;