import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { Consumer } from '../ChartContext';
import provideHighcharts from '../HighchartsProvider';
import getDisplayName from '../../utils/getDisplayName';
import clean from '../../utils/removeProvidedProps'; // This is a HOC function.
// It takes a component...

export default function provideChart(Component) {
  // ...and returns another component...
  var ChartWrappedComponent = function ChartWrappedComponent(props) {
    // ... and renders the wrapped component with the context chart
    // Notice that we pass through any additional props as well
    return React.createElement(Consumer, null, function (_ref) {
      var chart = _ref.chart,
          chartType = _ref.chartType,
          needsRedraw = _ref.needsRedraw;
      if (!chart) return null;

      var getChart = function getChart() {
        return {
          object: chart,
          type: chartType,
          get: chart.get.bind(chart),
          setSize: chart.setSize.bind(chart),
          update: clean(chart.update.bind(chart)),
          addAxis: clean(chart.addAxis.bind(chart)),
          addSeries: clean(chart.addSeries.bind(chart)),
          setTitle: clean(chart.setTitle.bind(chart)),
          showLoading: chart.showLoading.bind(chart),
          hideLoading: chart.hideLoading.bind(chart),
          addCredits: clean(chart.addCredits.bind(chart)),
          addAnnotation: chart.addAnnotation ? clean(chart.addAnnotation.bind(chart)) : null,
          removeAnnotation: chart.removeAnnotation ? chart.removeAnnotation.bind(chart) : null
        };
      };

      return React.createElement(Component, _extends({}, props, {
        getChart: getChart,
        needsRedraw: needsRedraw
      }));
    });
  };

  ChartWrappedComponent.displayName = "Chart.Provider(".concat(getDisplayName(Component), ")");
  return provideHighcharts(ChartWrappedComponent);
}