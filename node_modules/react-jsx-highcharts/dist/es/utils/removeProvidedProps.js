import { mapValues } from 'lodash-es';
import { isPlainObject } from 'lodash-es';
var FROM_HIGHCHARTS_PROVIDER = 'getHighcharts';
var FROM_CHART_PROVIDER = 'getChart';
var FROM_AXIS_PROVIDER = 'getAxis';
var FROM_SERIES_PROVIDER = 'getSeries';
var DEBOUNCED_REDRAW = 'needsRedraw';
export var PROVIDED_PROPS = [FROM_HIGHCHARTS_PROVIDER, FROM_CHART_PROVIDER, FROM_AXIS_PROVIDER, FROM_SERIES_PROVIDER, DEBOUNCED_REDRAW];

function cleanConfig() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  // omit provided props
  return Object.keys(config).filter(function (key) {
    return PROVIDED_PROPS.indexOf(key) < 0;
  }).reduce(function (object, key) {
    object[key] = config[key];
    return object;
  }, {});
}

function deepCleanConfig(config) {
  var cleanedRoot = cleanConfig(config);
  return mapValues(cleanedRoot, function (prop) {
    if (isPlainObject(prop) === false) return prop;
    return deepCleanConfig(prop);
  });
}

export default function removeProvidedProps(func) {
  return function (config) {
    var cleanedConfig = deepCleanConfig(config);

    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    return func.apply(void 0, [cleanedConfig].concat(rest));
  };
}