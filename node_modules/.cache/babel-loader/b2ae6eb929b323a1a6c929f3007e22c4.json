{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport DelayRender from '../DelayRender';\nimport provideAxis from '../AxisProvider';\nimport { Consumer } from '../SeriesContext';\nimport getDisplayName from '../../utils/getDisplayName';\nimport clean from '../../utils/removeProvidedProps'; // This is a HOC function.\n// It takes a component...\n\nexport default function provideSeries(Component) {\n  // ...and returns another component...\n  var SeriesWrappedComponent = function SeriesWrappedComponent(props) {\n    // ... and renders the wrapped component with the context series\n    // Notice that we pass through any additional props as well\n    return React.createElement(DelayRender, null, React.createElement(Consumer, null, function (series) {\n      if (!series && props.seriesId) {\n        var chart = props.getChart();\n        series = chart.get(props.seriesId);\n      }\n\n      if (!series) return null;\n\n      var getSeries = function getSeries() {\n        return {\n          object: series,\n          id: series.userOptions && series.userOptions.id,\n          type: series.type,\n          update: clean(series.update.bind(series)),\n          remove: series.remove.bind(series),\n          setData: series.setData.bind(series),\n          setVisible: series.setVisible.bind(series)\n        };\n      };\n\n      return React.createElement(Component, _extends({}, props, {\n        getSeries: getSeries\n      }));\n    }));\n  };\n\n  SeriesWrappedComponent.displayName = \"Series.Provider(\".concat(getDisplayName(Component), \")\");\n  return provideAxis(SeriesWrappedComponent);\n}","map":null,"metadata":{},"sourceType":"module"}